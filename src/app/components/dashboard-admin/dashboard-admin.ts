import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, RouterModule, RouterOutlet } from '@angular/router';
import {
  trigger, transition, style, animate
} from '@angular/animations';
import { UserService } from '../../services/user';
import { PermissionService } from '../../services/permission.service';

interface MenuItem {
  key: string;
  label: string;
  icon: string;
  open: boolean;
  children: { key: string; icon: string; label: string; route: string; submenu?: { key: string; icon: string; label: string; route: string }[] }[];
}

@Component({
  standalone: true,
  selector: 'app-admin-dashboard',
  templateUrl: './dashboard-admin.html',
  styleUrls: ['./dashboard-admin.css'],
  imports: [CommonModule, RouterOutlet, RouterModule],
  animations: [
    trigger('slideInOut', [
      transition(':enter', [
        style({ height: 0, opacity: 0 }),
        animate('200ms ease-out', style({ height: '*', opacity: 1 }))
      ]),
      transition(':leave', [
        animate('200ms ease-in', style({ height: 0, opacity: 0 }))
      ])
    ])
  ],
})
export class AdminDashboardComponent implements OnInit {
  sidebarCollapsed = false;
  currentUser: any = {};
  filteredMenus: MenuItem[] = [];

  menus: MenuItem[] = [
    {
      key: 'home',
      label: '‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°',
      icon: 'üìë',
      open: false,
      children: [
        { key: 'home', icon: 'üè†', label: 'Home', route: '/dashboard-admin/' },
        { key: 'contact', icon: 'üìû', label: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', route: '/dashboard-admin/contact' },
        { key: 'search-edit', icon: 'üîé', label: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç', route: '/dashboard-admin/editcustomer' }
      ]
    },
    {
      key: 'sales',
      label: '‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡∏´‡∏∏‡πâ‡∏ô',
      icon: 'üìä',
      open: false,
      children: [
        { key: 'print-share-purchase-request', icon: 'üõí', label: '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏∏‡πâ‡∏ô', route: '/dashboard-admin/print-share-purchase-request' },
        { key: 'common-shares', icon: 'üò∂‚Äçüå´Ô∏è', label: '‡∏Ç‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏≤‡∏°‡∏±‡∏ç', route: '/dashboard-admin/common-shares' },
        { key: 'cratenewsharecertificate', icon: 'üìÑ', label: '‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏ó‡∏ô‡πÉ‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∏‡∏î/‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢', route: '/dashboard-admin/cratenewsharecertificate' },
        { key: 'transfer-share', icon: '‚ôæÔ∏è', label: '‡πÇ‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏∑‡∏≠', route: '/dashboard-admin/transfer-share' },
        { key: 'approve-item', icon: '‚úÖ', label: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£', route: '/dashboard-admin/approve-item' },
        { key: 'approve-issue', icon: 'üìù', label: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡∏´‡∏∏‡πâ‡∏ô', route: '/dashboard-admin/approve-issue' },
        { key: 'print-certificates', icon: 'üñ®Ô∏è', label: '‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡∏´‡∏∏‡πâ‡∏ô', route: '/dashboard-admin/print-certificates' },
        { key: 'block-certificates', icon: 'üîí', label: '‡∏ö‡∏•‡πá‡∏≠‡∏Ñ/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Ñ ‡πÉ‡∏ö‡∏´‡∏∏‡πâ‡∏ô', route: '/dashboard-admin/block-certificates' }
      ]
    },
    {
      key: 'financial',
      label: '‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô',
      icon: 'üí∞',
      open: false,
      children: [
        { key: 'dividend', icon: 'üí∞', label: '‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•', route: '/dashboard-admin/dividend' },
        { key: 'pnd', icon: 'üìä', label: '‡∏†.‡∏á.‡∏î.', route: '', 
          submenu: [
          { key: 'pnd2', icon: 'üìÑ', label: '‡∏†.‡∏á.‡∏î. 2', route: '/dashboard-admin/pnd2' },
          { key: 'pnd2a', icon: 'üìã', label: '‡∏†.‡∏á.‡∏î. 2 ‡∏Å', route: '/dashboard-admin/pnd2a' },
          { key: 'pnd53', icon: 'üìä', label: '‡∏†.‡∏á.‡∏î. 53', route: '/dashboard-admin/pnd53' }
        ]}
      ]
    },
    {
      key: 'spin-file',
      label: 'SCB SPIN FILE',
      icon: '‚ö°',
      open: false,
      children: [
        { key: 'create-spin-files', icon: '‚ö°', label: '‡∏™‡∏£‡πâ‡∏≤‡∏á SPIN FILE ‡∏™‡πà‡∏á SCB', route: '/dashboard-admin/create-spin-files' },
        { key: 'spin-files', icon: 'üîå', label: '‡∏£‡∏±‡∏ö‡∏ú‡∏• SPIN FILE ‡∏à‡∏≤‡∏Å SCB', route: '/dashboard-admin/spin-files' }
      ]
    },
    {
      key: 'report',
      label: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô',
      icon: 'üìÑ',
      open: false,
      children: [
        { key: 'reports', icon: 'üìÑ', label: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', route: '/dashboard-admin/reports' }
      ]
    },
    {
      key: 'user',
      label: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
      icon: 'üë™',
      open: false,
      children: [
        { key: 'users', icon: 'üë§', label: '‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', route: '/dashboard-admin/users' },
        { key: 'change-password', icon: 'üîë', label: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô', route: '/dashboard-admin/change-password' }
      ]
    },
    {
      key: 'system',
      label: '‡∏£‡∏∞‡∏ö‡∏ö',
      icon: 'üõ†Ô∏è',
      open: false,
      children: [
        { key: 'system', icon: 'üõ†Ô∏è', label: '‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏ö‡∏ö', route: '/dashboard-admin/system' },
        { key: 'documents-upload', icon: 'üìò', label: 'Upload ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£', route: '/dashboard-admin/documents/upload' },
        { key: 'documents-forms-procedures', icon: 'üìã', label: '‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå/‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏´‡∏∏‡πâ‡∏ô', route: '/dashboard-admin/documents/forms-procedures' },
        { key: 'documents-user-manual', icon: 'üìñ', label: '‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', route: '/dashboard-admin/documents/user-manual' },
        { key: 'developer', icon: 'üíª', label: 'DEVELOPER', route: '/dashboard-admin/developer' }
      ]
    }
  ];

  constructor(
    private readonly router: Router,
    private readonly userService: UserService,
    private readonly permissionService: PermissionService
  ) { }

  toggleSidebar() {
    this.sidebarCollapsed = !this.sidebarCollapsed;
  }

  openMenu(key: string) {
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó state ‡πÉ‡∏ô menus
    this.menus = this.menus.map(menu => {
      const isTarget = menu.key === key;
      return {
        ...menu,
        open: isTarget ? !menu.open : false
      };
    });
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó filteredMenus ‡∏î‡πâ‡∏ß‡∏¢
    this.filteredMenus = this.permissionService.filterMenusByPermission(
      this.menus, 
      this.currentUser.level
    );
  }


  logout() {
    sessionStorage.clear();
    this.router.navigate(['/login']);
  }

  // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ level ‡∏à‡∏≤‡∏Å lvlDesc
  getUserLevelName(levelCode: string): string {
    return this.userService.getUserLevelName(levelCode);
  }

  // ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠
  getUserInitials(fullname: string): string {
    return this.userService.getInitials(fullname);
  }

  // Filter menus ‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
  private filterMenusByPermission(): void {
    this.filteredMenus = this.permissionService.filterMenusByPermission(
      this.menus, 
      this.currentUser.level
    );
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô component
  canView(menuId: string): boolean {
    return this.permissionService.hasActionPermission(menuId, this.currentUser.level);
  }

  ngOnInit(): void {
    if (typeof window !== 'undefined') {
      const token = sessionStorage.getItem('token');
      if (!token) {
        this.router.navigate(['/login']);
      } else {
        this.currentUser = this.userService.getCurrentUser();
        
        this.filterMenusByPermission();
      }
    }
  }
}
