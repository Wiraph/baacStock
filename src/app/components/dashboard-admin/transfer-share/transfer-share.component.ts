import { Component, Input, OnInit, ChangeDetectorRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { SearchEditComponent } from '../search-edit/search-edit';
import { FormArray, FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';
import { CustomerService, CustomerDetailDto2 } from '../../../services/customer';
import Swal from 'sweetalert2';
import { DataTransfer } from '../../../services/data-transfer';
import { MetadataService } from '../../../services/metadata';
import { CustomerStockService } from '../../../services/customer-stock-service';
import { StockService } from '../../../services/stock';
import { Divident } from '../../../services/divident';
import { forkJoin } from 'rxjs';
import { StocktransferService } from '../../../services/stocktransfer';

interface TransferItem {
  CUSid: string;
  CUSun: number;
  accTY?: string;
  accNO?: string;
  accNA?: string;
  payTY?: string;
}

@Component({
  selector: 'app-transfer-share',
  standalone: true,
  imports: [CommonModule, FormsModule, SearchEditComponent, ReactiveFormsModule],
  templateUrl: './transfer-share.component.html',
})
export class TransferShareComponent implements OnInit {

  @Input() InputtransferShare!: string;

  stockData: any;
  stkTransList: any[] = [];
  customerData: any = '';
  activeView = 'search';
  cusId = '';
  selectedcustomer: any = '';
  remcodeList: any[] = [];
  accList: any[] = [];
  transferRecipients: any[] = [];
  transferReason: any = '';
  sesstionSearch = true;
  loading = false;


  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
  transferSummary: any = null;

  searchForm: FormGroup;
  transferForm: FormGroup;
  transferList: TransferItem[] = [];
  foundReceiver: CustomerDetailDto2 | null = null;

  constructor(
    private readonly cdRef: ChangeDetectorRef,
    private readonly dataTransfer: DataTransfer,
    private readonly metadataService: MetadataService,
    private readonly customerService: CustomerService,
    private readonly customerStockService: CustomerStockService,
    private readonly fb: FormBuilder,
    private readonly stockService: StockService,
    private readonly dividendService: Divident,
    private readonly stocktransferService: StocktransferService,
  ) {
    this.transferForm = this.fb.group({
      transfers: this.fb.array([])
    });

    this.searchForm = this.fb.group({
      stkOWNiD: ['', Validators.required]
    })
  }

  ngOnInit(): void {
    this.dataTransfer.setPageStatus('4');
  }

  onTransferStockSelected(event: any) {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å api ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    this.cusId = event.cusId;
    this.activeView = event.view;
    this.onLoadTransferList(this.cusId);
  }

  onLoadTransferList(cusiD: string) {
    const payload = {
      GetDTL: 'bySTK@bySTK-TRF',
      STKno: '',
      CUSid: cusiD,
      CUSfn: '',
      CUSln: '',
      stkA: '1',
      PGNum: 1,
      PGSize: 9999999
    };
    this.customerStockService.searchCustomerStock(payload).subscribe({
      next: (res) => {
        this.stkTransList = res;
        console.log("stkTransList", this.stkTransList);
        this.cdRef.detectChanges();
      }, error: (err) => {
        console.log("Errors", err);
      }
    })

    const payload2 = {
      CUSid: cusiD
    }

    this.customerService.getCustomerTable(payload2).subscribe({
      next: (res: any) => {
        this.customerData = res;
        this.cdRef.detectChanges();
      }, error: (err) => {
        console.log("Error", err);
      }
    })
  }

  getStockDetail(stkNote: string) {
    const payload = {
      stkNote: stkNote
    };

    this.stockService.getStockDetail(payload).subscribe({
      next: (res: any) => {
        this.selectedcustomer = res;
        console.log("Selectedcustomer", this.selectedcustomer);
        this.cdRef.detectChanges();
      }, error: () => {
        Swal.fire({
          icon: 'error',
          title: "Error",
          text: "‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤"
        })
      }
    })
  }

  onTransferClick(item: any) {    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡∏´‡∏∏‡πâ‡∏ô
    if (item.stDESC !== '‡∏õ‡∏Å‡∏ï‡∏¥') {
      Swal.fire({
        icon: 'warning',
        title: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏î‡πâ',
        text: '‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏õ‡∏Å‡∏ï‡∏¥'
      });
      return;
    }

    console.log(item);
    this.activeView = 'transfers';
    this.getStockDetail(item.stkNOTE);
    this.loadMetaData();
  }

  get transfers(): FormArray {
    return this.transferForm.get('transfers') as FormArray;
  }

  createTransferGroup(receiver: any, dividend: any): FormGroup {
    const fullname = `${receiver.titleDESC}${receiver.cusFName} ${receiver.cusLName}`;
    return this.fb.group({
      CUSid: [receiver.cusiD, Validators.required],
      Name: [fullname],
      CUSun: [null, [Validators.required, Validators.min(1)]],
      accTY: [dividend?.stkACCtype || ''],
      accNO: [dividend?.stkACCno || ''],
      accNA: [dividend?.stkACCname || ''],
      payTY: [dividend?.stkPayType || '']
    });
  }

    searchReceiver() {
    const cusId = this.searchForm.value.stkOWNiD;
    
    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 1: ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÇ‡∏≠‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡πÇ‡∏≠‡∏ô
    if (cusId === this.selectedcustomer?.cusId) {
      Swal.fire({
        icon: 'error',
        title: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏î‡πâ',
        text: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡πÇ‡∏≠‡∏ô‡πÑ‡∏î‡πâ'
      });
      return;
    }

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 2: ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÇ‡∏≠‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    const existingTransfers = this.transferForm.value.transfers || [];
    const isAlreadyInList = existingTransfers.some((transfer: any) => transfer.CUSid === cusId);
    
    if (isAlreadyInList) {
      Swal.fire({
        icon: 'warning',
        title: '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏ô‡∏ã‡πâ‡∏≥',
        text: '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß'
      });
      return;
    }

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 3: ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
    const availableShares = this.selectedcustomer?.stkUnit || 0;
    const totalUsedShares = existingTransfers.reduce((sum: number, transfer: any) => {
      return sum + (transfer.CUSun || 0);
    }, 0);
    
    if (totalUsedShares >= availableShares) {
      Swal.fire({
        icon: 'warning',
        title: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠',
        text: `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (${totalUsedShares.toLocaleString()} ‡∏´‡∏∏‡πâ‡∏ô) ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ (${availableShares.toLocaleString()} ‡∏´‡∏∏‡πâ‡∏ô) ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å`
      });
      return;
    }

    const payload = {
      cusId: cusId
    };
    
    forkJoin({
      customer: this.customerService.getCustomerTr(payload),
      dividend: this.dividendService.getDividend(payload)
    }).subscribe({
          next: (res) => {
        const group = this.createTransferGroup(res.customer, res.dividend);
        this.transfers.push(group);   // ‚¨ÖÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ list
        // this.sesstionSearch = false;

                console.log("All transfers", this.transferForm.value.transfers);
        
        // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        this.searchForm.patchValue({
          stkOWNiD: ''
        });
        
                this.cdRef.detectChanges();
          },
          error: (err) => {
        console.log("Error", err);
        Swal.fire({
          icon: 'error',
          title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤'
        });
      }
    })
  }

  removeAt(index: number) {
    this.transfers.removeAt(index);
  }

  // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡πÑ‡∏î‡πâ
  checkTransferableShares(): { canTransfer: boolean; totalRequested: number; availableShares: number; message: string } {
    const transfers = this.transferForm.value.transfers || [];
    const availableShares = this.selectedcustomer?.stkUnit || 0;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const totalRequested = transfers.reduce((sum: number, transfer: TransferItem) => {
      return sum + (transfer.CUSun || 0);
    }, 0);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ
    const canTransfer = totalRequested <= availableShares;
    
    let message = '';
    if (!canTransfer) {
      message = `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô (${totalRequested.toLocaleString()} ‡∏´‡∏∏‡πâ‡∏ô) ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ (${availableShares.toLocaleString()} ‡∏´‡∏∏‡πâ‡∏ô)`;
    } else if (totalRequested === 0) {
      message = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô';
    } else {
      message = `‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡πÑ‡∏î‡πâ ${totalRequested.toLocaleString()} ‡∏´‡∏∏‡πâ‡∏ô ‡∏à‡∏≤‡∏Å ${availableShares.toLocaleString()} ‡∏´‡∏∏‡πâ‡∏ô (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${(availableShares - totalRequested).toLocaleString()} ‡∏´‡∏∏‡πâ‡∏ô)`;
    }
    
    return { canTransfer, totalRequested, availableShares, message };
  }

  // üîç ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  getRemainingSharesForNextPerson(currentIndex: number): number {
    const transfers = this.transferForm.value.transfers || [];
    const availableShares = this.selectedcustomer?.stkUnit || 0;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
    const usedShares = transfers.reduce((sum: number, transfer: TransferItem, index: number) => {
      if (index < currentIndex) {
        return sum + (transfer.CUSun || 0);
      }
      return sum;
    }, 0);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    const remainingShares = availableShares - usedShares;
    
    return Math.max(0, remainingShares);
  }



  // üîç ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏ö‡∏ö real-time
  onShareAmountChange(currentIndex: number) {
    const transfers = this.transferForm.value.transfers || [];
    const availableShares = this.selectedcustomer?.stkUnit || 0;
    let totalUsedShares = 0;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
    for (let i = 0; i < transfers.length; i++) {
      if (i < currentIndex) {
        totalUsedShares += transfers[i].CUSun || 0;
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const currentShares = transfers[currentIndex]?.CUSun || 0;
    const remainingForCurrent = availableShares - totalUsedShares;
    
    if (currentShares > remainingForCurrent) {
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏™‡πà‡πÑ‡∏î‡πâ
      const transferControl = this.transfers.at(currentIndex);
      if (transferControl) {
        transferControl.patchValue({
          CUSun: Math.max(0, remainingForCurrent)
        });
      }
    }

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    this.adjustSubsequentRecipients(currentIndex);
  }

  // üîç ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  adjustSubsequentRecipients(changedIndex: number) {
    const transfers = this.transferForm.value.transfers || [];
    const availableShares = this.selectedcustomer?.stkUnit || 0;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    let totalUsedShares = 0;
    for (let i = 0; i <= changedIndex; i++) {
      totalUsedShares += transfers[i]?.CUSun || 0;
    }
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á
    for (let i = changedIndex + 1; i < transfers.length; i++) {
      const remainingForNext = availableShares - totalUsedShares;
      const currentShares = transfers[i]?.CUSun || 0;
      
      // ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
      if (currentShares > remainingForNext) {
        const transferControl = this.transfers.at(i);
        if (transferControl) {
          transferControl.patchValue({
            CUSun: Math.max(0, remainingForNext)
          });
        }
      }
      
      totalUsedShares += transfers[i]?.CUSun || 0;
    }
  }

  submitAll() {

    if (this.transferReason == '') {
      Swal.fire("Error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏´‡∏∏‡πâ‡∏ô", "error");
      return;
    }

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const transfers = this.transferForm.value.transfers || [];
    if (transfers.length === 0) {
      Swal.fire("Error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏≠‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏ô", "error");
      return;
    }

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (this.transferForm.valid) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ã‡πâ‡∏≥‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const hasSelfTransfer = transfers.some((t: TransferItem) => t.CUSid === this.selectedcustomer?.cusId);
      if (hasSelfTransfer) {
      Swal.fire({
        icon: 'error',
          title: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏î‡πâ',
          text: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡πÇ‡∏≠‡∏ô‡πÑ‡∏î‡πâ'
      });
      return;
    }

             // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏ô‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
       const cusIds = transfers.map((t: TransferItem) => t.CUSid);
       const uniqueCusIds = [...new Set(cusIds)];
       if (cusIds.length !== uniqueCusIds.length) {
         Swal.fire({
           icon: 'warning',
           title: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥',
           text: '‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏ô‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏≠‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏≠‡∏≠‡∏Å'
         });
         return;
       }

       // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 3: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡πÑ‡∏î‡πâ
       const shareCheck = this.checkTransferableShares();
       if (!shareCheck.canTransfer) {
      Swal.fire({
        icon: 'error',
           title: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô',
           text: shareCheck.message,
           confirmButtonText: '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß'
         });
         return;
       }

       // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
       if (shareCheck.totalRequested === 0) {
         Swal.fire({
           icon: 'warning',
           title: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô',
           text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏≠‡∏ô'
      });
      return;
    }



      const payload = {
        TRF_CUSid: this.selectedcustomer.cusId,
        TRF_stkNOTE: this.selectedcustomer.stkNote,
        TRF_stkSTA: this.selectedcustomer.stCode,
        TRF_stkSTP: "",
        TRF_stkUNiTALL: this.selectedcustomer.stkUnit,

        TR2_RemCode: this.transferReason,
        TR2_LST_CUSid: transfers.map((t: TransferItem) => t.CUSid).join('|'),
        TR2_LST_CUSun: transfers.map((t: TransferItem) => t.CUSun).join('|'),
        TR2_LST_accTY: transfers.map((t: TransferItem) => t.accTY).join('|'),
        TR2_LST_accNO: transfers.map((t: TransferItem) => t.accNO).join('|'),
        TR2_LST_accNA: transfers.map((t: TransferItem) => t.accNA).join('|'),
        TR2_LST_payTY: transfers.map((t: TransferItem) => t.payTY).join('|')
      };
      
      console.log("Final Payload", payload);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    Swal.fire({
        icon: 'success',
        title: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        text: `‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö ${transfers.length} ‡∏Ñ‡∏ô`,
      showCancelButton: true,
        confirmButtonText: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    }).then((result) => {
      if (result.isConfirmed) {
          // TODO: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          this.stocktransferService.transferRequest(payload).subscribe({
            next: (res) => {
              console.log("Success", res);
              Swal.fire({
                icon: 'success',
                title: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                text: '‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
                confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
              });
            }, error: (err) => {
              console.log("Fail", err);
              Swal.fire({
                icon: 'error',
                title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
                text: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
                confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
              });
            }
          })
          console.log('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', payload);
        }
      });
    } else {
      Swal.fire("Error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö", "error");
    }
  }

  cancelAll() {
    this.transfers.clear();
    this.transfers.reset();
    this.activeView = 'transfer';
    this.searchForm.reset();
    this.cdRef.detectChanges();
  }

  loadMetaData() {
    this.metadataService.getRemCode().subscribe({
      next: (res) => {
        this.remcodeList = res.filter((item: any) => item.remCode.startsWith("003"));
        this.cdRef.detectChanges();
        console.log("Remcode", this.remcodeList);
      }, error: (err) => {
        console.log("Fail Load remcode", err);
      }
    })

    this.metadataService.getAcctypes().subscribe({
      next: (res) => {
        this.accList = res;
        this.cdRef.detectChanges();
        console.log("Acctype", this.accList);
      }, error: (err) => {
        console.log("Fail load Acctype", err);
      }
    })
  }

  goBack() {
    this.transferList = [];
    this.activeView = 'search';
  }

  formatThaiDateTime(datetimeup: string): string {
    if (!datetimeup) return '-';

    const [datePart, timePart] = datetimeup.split('-');
    if (!datePart || !timePart) return '-';

    let year = +datePart.substring(0, 4);
    const month = +datePart.substring(4, 6) - 1;
    const day = +datePart.substring(6, 8);
    const hour = +timePart.substring(0, 2);
    const minute = +timePart.substring(2, 4);
    const second = +timePart.substring(4, 6);

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®. ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (year > 2500) {
      year = year - 543; // ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
    }

    const thaiMonths = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.',
      '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.'];

    const pad = (n: number) => n < 10 ? '0' + n : n.toString();

    return `${day} ${thaiMonths[month]} ${year + 543} ${pad(hour)}:${pad(minute)}:${pad(second)} ‡∏ô.`;
  }
}
