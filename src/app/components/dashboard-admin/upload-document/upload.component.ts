import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import Swal from 'sweetalert2';

interface UploadedFile {
  id: string;
  name: string;
  size: number;
  type: string;
  uploadDate: Date;
  uploadedBy: string;
  status: 'uploading' | 'completed' | 'error';
  progress: number;
  url?: string;
}

@Component({
  selector: 'app-upload',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './upload.component.html'
})
export class UploadComponent implements OnInit {
  
  // File Upload Properties
  isDragOver = false;
  selectedFiles: File[] = [];
  uploadedFiles: UploadedFile[] = [];
  isUploading = false;
  
  // Configuration
  maxFileSize = 10 * 1024 * 1024; // 10MB
  allowedTypes = [
    'application/pdf',
    'application/msword',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'image/jpeg',
    'image/png',
    'image/gif',
    'text/plain'
  ];
  
  allowedExtensions = ['.pdf', '.doc', '.docx', '.txt'];

  constructor() { }

  ngOnInit(): void {
    this.loadUploadedFiles();
  }

  // Drag & Drop Events
  onDragOver(event: DragEvent) {
    event.preventDefault();
    event.stopPropagation();
    this.isDragOver = true;
  }

  onDragLeave(event: DragEvent) {
    event.preventDefault();
    event.stopPropagation();
    this.isDragOver = false;
  }

  onDrop(event: DragEvent) {
    event.preventDefault();
    event.stopPropagation();
    this.isDragOver = false;
    
    const files = event.dataTransfer?.files;
    if (files) {
      this.handleFiles(Array.from(files));
    }
  }

  // File Selection
  onFileSelected(event: any) {
    const files = event.target.files;
    if (files) {
      this.handleFiles(Array.from(files));
    }
  }

  // File Handling
  handleFiles(files: File[]) {
    const validFiles: File[] = [];
    
    for (const file of files) {
      if (this.validateFile(file)) {
        validFiles.push(file);
      }
    }
    
    if (validFiles.length > 0) {
      this.selectedFiles = [...this.selectedFiles, ...validFiles];
      console.log('üìÅ Selected files:', this.selectedFiles);
    }
  }

  // File Validation
  validateFile(file: File): boolean {
    // Check file size
    if (file.size > this.maxFileSize) {
      Swal.fire({
        icon: 'error',
        title: '‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ',
        text: `‡πÑ‡∏ü‡∏•‡πå "${file.name}" ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î ${this.formatFileSize(file.size)} ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î ${this.formatFileSize(this.maxFileSize)}`,
        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
      });
      return false;
    }

    // Check file type
    if (!this.allowedTypes.includes(file.type)) {
      const extension = '.' + file.name.split('.').pop()?.toLowerCase();
      if (!this.allowedExtensions.includes(extension)) {
        Swal.fire({
          icon: 'error',
          title: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
          text: `‡πÑ‡∏ü‡∏•‡πå "${file.name}" ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï: ${this.allowedExtensions.join(', ')}`,
          confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
        });
        return false;
      }
    }

    return true;
  }

  // Upload Files
  async uploadFiles() {
    if (this.selectedFiles.length === 0) {
      Swal.fire({
        icon: 'warning',
        title: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î',
        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
      });
      return;
    }

    this.isUploading = true;

    for (const file of this.selectedFiles) {
      await this.uploadSingleFile(file);
    }

    this.selectedFiles = [];
    this.isUploading = false;
    
    Swal.fire({
      icon: 'success',
      title: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      text: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
    });
  }

  // Upload Single File (Mock Implementation)
  private uploadSingleFile(file: File): Promise<void> {
    return new Promise((resolve) => {
      const uploadedFile: UploadedFile = {
        id: this.generateId(),
        name: file.name,
        size: file.size,
        type: file.type,
        uploadDate: new Date(),
        uploadedBy: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö', // ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å session
        status: 'uploading',
        progress: 0
      };

      this.uploadedFiles.unshift(uploadedFile);

      // Simulate upload progress
      const interval = setInterval(() => {
        uploadedFile.progress += Math.random() * 30;
        
        if (uploadedFile.progress >= 100) {
          uploadedFile.progress = 100;
          uploadedFile.status = 'completed';
          uploadedFile.url = `/uploads/documents/${uploadedFile.id}_${file.name}`;
          clearInterval(interval);
          resolve();
        }
      }, 200);
    });
  }

  // Remove Selected File
  removeSelectedFile(index: number) {
    this.selectedFiles.splice(index, 1);
  }

  // Delete Uploaded File
  deleteUploadedFile(fileId: string) {
    Swal.fire({
      icon: 'warning',
      title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö',
      text: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      showCancelButton: true,
      confirmButtonText: '‡∏•‡∏ö',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
      confirmButtonColor: '#dc2626'
    }).then((result) => {
      if (result.isConfirmed) {
        this.uploadedFiles = this.uploadedFiles.filter(file => file.id !== fileId);
        Swal.fire({
          icon: 'success',
          title: '‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          text: '‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
          confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
        });
      }
    });
  }

  // Download File
  downloadFile(file: UploadedFile) {
    if (file.url) {
      // Mock download - ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
      console.log('üì• Downloading file:', file.url);
      Swal.fire({
        icon: 'info',
        title: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î',
        text: `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå "${file.name}"`,
        timer: 2000,
        showConfirmButton: false
      });
    }
  }

  // Load Uploaded Files (Mock Data)
  private loadUploadedFiles() {
    // Mock data - ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
    this.uploadedFiles = [
      {
        id: '1',
        name: '‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô.pdf',
        size: 2048576,
        type: 'application/pdf',
        uploadDate: new Date(2024, 11, 20),
        uploadedBy: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
        status: 'completed',
        progress: 100,
        url: '/uploads/documents/1_‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô.pdf'
      },
      {
        id: '2',
        name: '‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠.docx',
        size: 1024000,
        type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        uploadDate: new Date(2024, 11, 19),
        uploadedBy: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
        status: 'completed',
        progress: 100,
        url: '/uploads/documents/2_‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠.docx'
      }
    ];
  }

  // Utility Methods
  formatFileSize(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  getFileIcon(type: string): string {
    if (type.includes('pdf')) return 'üìÑ';
    if (type.includes('word') || type.includes('document')) return 'üìù';
    if (type.includes('image')) return 'üñºÔ∏è';
    if (type.includes('text')) return 'üìÉ';
    return 'üìÅ';
  }

  private generateId(): string {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  }
}